import os
import json
import openai
from dotenv import load_dotenv

# Load environment variables from a .env file
load_dotenv()

# This is a mock response that serves as a fallback if the API key is not available.
MOCK_LLM_RESPONSE = {
  "reportTitle": "AI-Generated Corporate Credit Assessment: DraftKings Inc. (DKNG)",
  "assessmentDate": "2024-10-28",
  "companyName": "DraftKings Inc.",
  "tickerSymbol": "DKNG",
  "overview": "This is a mock overview. In a real scenario, this would be generated by the LLM based on the prompt.",
  "corporateCreditRating": {"rating": "B+", "outlook": "Stable", "justification": "Mock justification."},
  "financialPerformance": {"revenue": "1.2B", "adjustedEBITDA": "95M", "freeCashFlow": "-50M", "leverage": "5.6x"},
  "sncfRegulatoryRating": {"indicativeRating": "Special Mention", "justification": "Mock justification."},
  "strengths": ["Strong brand recognition", "Market leadership"],
  "weaknesses": ["History of net losses", "High marketing spend"],
  "specialFocusAreas": ["Path to profitability", "Acquisition integration"]
}

def generate_report(prompt):
    """
    Generates a credit report by calling the OpenAI API.
    If the API key is not available, it returns a mock response.
    """
    api_key = os.getenv("OPENAI_API_KEY")

    if not api_key:
        print("\n--- WARNING: OPENAI_API_KEY not found. ---")
        print("Falling back to a mock LLM response. To use a real LLM, please set the OPENAI_API_KEY environment variable.")
        return MOCK_LLM_RESPONSE

    print("\n--- Calling OpenAI API to Generate Report ---")
    client = openai.OpenAI(api_key=api_key)

    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "You are an expert credit analyst. Your task is to generate a corporate credit report in a structured JSON format."},
                {"role": "user", "content": prompt}
            ],
            response_format={"type": "json_object"}
        )

        report_str = response.choices[0].message.content
        report_dict = json.loads(report_str)

        print("--- Successfully received and parsed report from OpenAI API. ---")
        return report_dict

    except openai.APIConnectionError as e:
        print(f"OpenAI API Connection Error: {e.__cause__}")
    except openai.RateLimitError as e:
        print(f"OpenAI API Rate Limit Error: {e.response.status_code} {e.response.text}")
    except openai.APIStatusError as e:
        print(f"OpenAI API Status Error: {e.status_code} - {e.response}")
    except json.JSONDecodeError as e:
        print(f"Failed to decode JSON from LLM response: {e}")
    except Exception as e:
        print(f"An unexpected error occurred during the LLM call: {e}")

    print("--- LLM call failed. Returning None. ---")
    return None
